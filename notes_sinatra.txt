# notes for sinatra: 

http: hypertext transfer protocol
	- allows communication over the internet bw clients and servers
	- client will request a resource from server, which processes the request and sends back a response to the client. 
	- this response contains a status code, and the requested resource (usually a web page)

	these are sent via http. 

sinatra is a ruby application in 2000 LOC. 
	good study to understand how it works, and understand ruby better. 

sinatra is build on top of Rack > which is a low-level interface that communicates bw/ an http server and a ruby object. 

(other riby web frameworks: rails, ramaze, rango, camping, halcyon)

## if you can build it in ruby, you can make it into a sinatra app. 
is this ^ statement true?

## only the last line is evaluated and sent to the browser. (the line before 'end' that is)

## restarting the server after every change to existing files can be tiresome, so it's worth it to use Sinatra::Reloader which is part of the Sinatra::Contrib library. 

>> to use Sinatra::Reloader, install the sinatra-contrib gem. 

doing this now. December 11, 2013

# ^ this route contains a named parameter, called :name, signified
# by the leading colon. 

# Named parameter can go anywhere in the url and are available in the 
# handler as part of the params hash. 

age_hash = {james: 23, amy: 34, bob: 45}

--------
get '/what/time/is/it/in/:number/:hours' do #  this is the same thing as :name
	number = params[:number].to_i
	time = Time.now + number * 3600
	"The time in #{number} hours will be #{time.strftime('%I:%M %p')}"
end

# understand what time is doing: 
# Time.now displays current time
# we can add seconds to Time.now hence the * 3600 (60 min * 60 sec)
### understand what .strftime is doing?
---------


#####
chapter 2
#####

symbols start with a colon, and may or may not be inside quotes:

:name
:first_name
:'last name' 

symbols are similar to string objects. here is how they differ: 
- two identical symbols are represented by the same object
whereas two identical strings are represented by two distinct objects.  


# review erb and stuff. 

# we can add as many views as we like using inline views, but that'd be a lot of repetition since most pages will have the same HTML at the start and end. 

# by default, Sinatra will automatically use any file called layout as the layout. 

this is something that we can use to serve html pages to  avoid repetition. DRY: don't repeat yourself. 


# alternatives to ERB supported by sinatra include:
- Haml 
- ERB
- Liquid
- Markdown
- Textile
- Radius 
- Markaby
- Slim # reads like html w/o the closing tags or <brackets >


###>>>
installed: slim, sass, sqlite, data_mapper, dm-sqlite-adapter

>> gem install slim 
>> gem install sass 
>> brew install sqlite 
>> gem install data_mapper
>> gem install dm-sqlite-adapter
13/dec/2013

# changed all erb files to .slim 
# also added require 'slim' to the main file. 
